=================================================================================== AULA 1 ===================================================================================

for(i=1, i<= u; i++) {
    for(j=1, j<= i; j++) {

        <instrução>

    }
}

>> quantas vezes a instrução é corrida?

[u]S[i=1]( [i]S[j=1]  1) = u(u+1)/2             ==> FORMULA IMPORTANTE

nota: S --> somatório


----- exemplo, funçao f1 -----

def f1(n):
    i, r = 0
    for i in range(n): r += i
    return r


    n   | #inter |   f1(n)
--------+--------+------------
    1   |    1   |     1
    2   |    2   |     3
    3   |    3   |     6
    4   |    4   |     10
    5   |    5   |     15
    6   |    6   |     21
    7   |    7   |     28
    8   |    8   |     36
    9   |    9   |     45
    10  |   10   |     55

CONCLUINDO: 
    * linear

[A FAZER]: esta tabela para as outras funções


----- fim do exemplo -----

>> funções recursivas

1. -----------------------------------
    unsigned int
    r1(unsigned int n) {
        if(n == 0) return 0;
        return 1 + r1(n – 1);
    }

            {0, se n = 0
    r1(n) = {
            {1 + r1(n-1), se n > 0


        
    r1(n) = 1 + r1(n-1) = 1 + 1 + r1(n-2) = 1 + 1 + 1 + r1(n-3)
        = k + r1(n -k)
        = n + r1(0)
        = n


2. -----------------------------------
    r4(unsigned int n) {
        if(n == 0) return 0;
        return 1 + r4(n – 1) + r4(n – 1);
    }

            { 0, se n = 0
    r4  =   {
            { 1 + r4(n – 1) + r4(n – 1), se n > 0


    r4(n) = 1 + r4(n – 1) + r4(n – 1) = 1 + 1 + r4(n – 2) + r4(n – 2) + 1 + r4(n – 2) + r4(n – 2) = 3 + 4 + r4(n – 3) + r4(n – 3) + r4(n – 3) + r4(n – 3)
          = 
          = (é melhor fazer à mão)


3. -----------------------------------
    r3(unsigned int n) {
        if(n == 0) return 0;
        return 1 + 2 * r3(n - 1);
    }

            { 0, se n = 0
    r3  =   {
            { 1 + 2 * r3(n - 1), se n > 0


    r3 = 1 + 2 * r3(n - 1) = 1 + 2 * (1 + 2 * r3(n - 1)) 
       = 1 + 2 + 4 * r3(n - 2)
       = 1 + 2 + 4 + 8 * r3(n - 1)

       = [k-1]S[i=0] 2^i + 2^k * r3(n - k)      # [k-1]S[i=0] 2^k * r3(n - k) = 0      &&     [k-1]S[i=0] 2^i = 2^n - 1

       = 2^n - 1


=================================================================================== AULA 2 ===================================================================================


    r4(unsigned int n) {
        if(n == 0) return 0;
        return 1 + r4(n – 1) + r4(n – 1);
    }

>> Qual é o número de chamadas recursivas desta função?

        { 0, se n = 0
c(n) =  {
        { 2 + 2 * c(n-1), se n > 0

c(n) = 2 + 2 * c(n-1) = 2 + 2 * [2 + 2 * c(n-1)] 
     = 2 + 4 + 4 * c(n-2)
     = 2 + 4 + 8 + ... + 2^k + 2^k * c(n-k)
     = 2 * [k-1]S[i=0] 2^i + 2^k * c(n - k)         # [k-1]S[i=0] 2^k * c(n - k) = 0     &&    [k-1]S[i=0] 2^i = 2^n - 1
     = 2 * 2^n-1



Sumário:
    Algorithm Design Techniques
        ◼ Brute-Force
        ◼ Divide-and-Conquer
        ◼ Decrease-and-Conquer


1. Força bruta / Procura exaustiva

    conjunto finito de hipoteses até encontrar (ou não) a solução


2. Dividir e conquistar


3. Decrease-and-Conquer

    sucessivas decomposições num pequeno problema

    quantas decomposições?
        ❑ Decrease-by-one
        ❑ Decrease by a constant factor
        ❑ Variable-size decrease


4. 

5. Greedy Algorithms

em cada passo fazer a escolha que nos parece melhor
nunca voltamos para tras

The choice made at each step is
    ❑ Feasible : satisfies constraints
    ❑ Locally optimal : best choice at each step
    ❑ Irrevocable